#include "/home/user408b/5554/include/EVB8871.h"

unsigned int count;

int main(void)
{
	// настроим сторожевой таймер
	WDTCTL = WDTPW + WDTHOLD;             // Stop watchdog timer
	
	// настроим порты светодиодов
	P7DIR |= LED_RED|LED_YELLOW|LED_GREEN|LED_BLUE|OLED;  // Set leds to output direction
	LEDS_PORT = 0xf8;		// погасим
	
	// выберем XT2 в качестве MCLK
	SetMCLK(MCLK_XT2);
	
	// настроим таймер TA0
	TA0CCTL0 = CCIE;                          // CCR0 interrupt enabled
	TA0CCR0 = 50000;
	TA0CTL = TASSEL_2 + MC_2 + TACLR + ID_3;        // SMCLK, contmode, clear TAR, divider=8

	// настройка USCI1 как UART
	P5SEL |= 0xc0;                             // P5.6,7 = USCI_A1 TXD/RXD
	UCA1CTL1 |= UCSWRST;                      // **Put state machine in reset**
	UCA1CTL1 |= UCSSEL_2;                     // SMCLK
	UCA1BR0 = (24000000/115200);              // 24MHz 115200 (see User's Guide)
	UCA1BR1 = 0;                              // 24MHz 115200
	UCA1MCTL |= UCBRS_1 + UCBRF_0;            // Modulation UCBRSx=1, UCBRFx=0
	UCA1CTL1 &= ~UCSWRST;                     // **Initialize USCI state machine**
	UCA1IE |= UCRXIE;                         // Enable USCI_A0 RX interrupt
	
	// обнулим счетчик
	count = 0;
	
	// разрешим прерывания
	__bis_SR_register(LPM0_bits + GIE);       // Enter LPM0, enable interrupts
	
	// 
	__no_operation();                         // For debugger
	
	return 0;
}

// Timer A0 interrupt service routine
#pragma vector=TIMER0_A0_VECTOR
__interrupt void TIMER0_A0_ISR(void)
{
	// обновим интервал
	TA0CCR0 += 50000;
	
	// увеличим счетчик
	++count;

	// 1/16 от счетчика
	unsigned int tmp = count >> 2;
	
	// вывод на светодиоды
	SetLed(LED_RED, tmp&0x08);
	SetLed(LED_YELLOW, tmp&0x04);
	SetLed(LED_GREEN, tmp&0x02);
	SetLed(LED_BLUE, tmp&0x01);
}

#pragma vector=USCI_A1_VECTOR
__interrupt void USCI_A1_ISR(void)
{
	switch(UCA1IV)
	{
	case 0:break;                             // Vector 0 - no interrupt
	case 2:                                   // Vector 2 - RXIFG
		while (!(UCA1IFG&UCTXIFG));             // USCI_A1 TX buffer ready?
		UCA1TXBUF = UCA1RXBUF;                  // TX -> RXed character
		break;
	case 4:break;                             // Vector 4 - TXIFG
	default: break;
	}
}


















void UARTWriteString(string str)
{
  int strSize = str.length();
  for(int i = 0; i < strSize; i++)
  {
    WDTCTL = WDTPW + WDTCNTCL; // 